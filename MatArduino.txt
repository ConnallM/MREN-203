import rospy  # Import the rospy package for working with ROS in Python
import numpy as np  # Import the NumPy package for numerical calculations
import matplotlib.pyplot as plt  # Import the matplotlib package for creating plots

from std_msgs.msg import Float32  # Import the Float32 message type from the std_msgs package
from nav_msgs.msg import Odometry  # Import the Odometry message type from the nav_msgs package

# Initialize ROS node
rospy.init_node('plot_node')

# Create empty arrays to store CO2, X, and Y data
CO2_vals = np.array([])
X_vals = np.array([])
Y_vals = np.array([])

# Define callback functions to retrieve CO2 and position data
def CO2_callback(data):
    # Append new CO2 data to CO2_vals array
    CO2_vals = np.append(CO2_vals, data.data)

def odom_callback(data):
    # Retrieve X and Y coordinates from Odometry message and append to X_vals and Y_vals arrays
    X_vals = np.append(X_vals, data.pose.pose.position.x)
    Y_vals = np.append(Y_vals, data.pose.pose.position.y)

# Subscribe to CO2 topic and position topic
CO2_sub = rospy.Subscriber('CO2', Float32, CO2_callback)
odom_sub = rospy.Subscriber('/odom', Odometry, odom_callback)

# Spin the node so the callback functions get called
rospy.spin()

# Combine the CO2, X, and Y data into a 3-column array
data = np.column_stack((X_vals, Y_vals, CO2_vals))

# Plot the data
plt.scatter(data[:,0], data[:,1], c=data[:,2])
plt.xlabel('X position')
plt.ylabel('Y position')
plt.colorbar(label='CO2 concentration')
plt.show()
